default_platform(:ios)

platform :ios do
  before_all do
    setup_ci
    load_asc_api_token
  end

  def bump_build_number()
    latest_build_number = latest_testflight_build_number(initial_build_number: 0)
    return (latest_build_number + 1)
  end

  def bump_version_name()
    puts "*** Incrementing the version number ***"

    version = lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION] || "1.0.0"
    x, y, z = version.split('.').map(&:to_i)
    z += 1
    new_version = [x, y, z].join('.')
  
    return new_version
  end

  desc "Load the App Store Connect API token"
  lane :load_asc_api_token do
    app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_KEY_P8"],
      is_key_content_base64: true,
      in_house: false
    )
  end

  desc "Release a new build to Apple Store"
  lane :release_beta do
    commit = last_git_commit
    puts "*** Starting iOS release for commit(#{commit[:abbreviated_commit_hash]}) ***"

    # Print diagnostic information
    puts "*** Environment Diagnostics ***"
    sh("xcodebuild -version")
    sh("pod --version")
    sh("ruby --version")
    sh("xcrun swift --version || echo 'Swift command not found'")
    sh("uname -m")
    sh("pod env || echo 'pod env command not available'")
    
    #read api key from app_store_connect_api_key lane variable
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    puts "*** Sync certificates and profiles ***"
    sync_code_signing(
      api_key: api_key,
      type: "appstore",
      readonly: true,
    )

    build_number = bump_build_number()
    version_name = bump_version_name()

    # Output version and build number to be picked up by GitHub Actions
    sh("echo \"VERSION_NUMBER=#{version_name}\" >> $GITHUB_OUTPUT")
    sh("echo \"BUILD_NUMBER=#{build_number}\" >> $GITHUB_OUTPUT")

    Dir.chdir "../.." do
      puts "*** Installing Flutterfire CLI tools ***"
      sh("dart", "pub", "global", "activate", "flutterfire_cli")
      puts "*** Build flutter iOS release for version #{version_name}+#{build_number} ***"
      sh("flutter", "build", "ipa", "--release", "--obfuscate", "--split-debug-info=symbols", "--build-number=#{build_number}", "--build-name=#{version_name}")
    end

    puts "*** Build and sign iOS app release ***"
    build_app(
      skip_build_archive: true,
      archive_path: "../build/ios/archive/Runner.xcarchive",
    )

    puts "Upload symbols to Crashlytics"
    upload_symbols_to_crashlytics

    puts "*** Upload app to testflight ***"
    upload_to_testflight(api_key: api_key)
  end
end
