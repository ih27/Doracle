name: IOS Pipeline

on: #workflow_dispatch
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'

jobs:
  build-and-deploy-ios:
    runs-on: macos-15
    steps:
      - name: Set up git and fetch all history for all branches and tags
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check available Xcode versions and select Xcode 16.2
        run: |
          echo "Available Xcode versions:"
          ls -la /Applications/ | grep Xcode
          
          # Check if Xcode 16.2 exists
          if [ -d "/Applications/Xcode_16.2.app" ]; then
            echo "Selecting Xcode 16.2"
            sudo xcode-select -s /Applications/Xcode_16.2.app
          elif [ -d "/Applications/Xcode.app" ]; then
            echo "Xcode 16.2 not found, checking default Xcode version"
            sudo xcode-select -s /Applications/Xcode.app
          else
            echo "Searching for any Xcode version"
            XCODE_PATH=$(find /Applications -maxdepth 1 -name "Xcode*.app" | head -n 1)
            if [ -n "$XCODE_PATH" ]; then
              echo "Selecting $XCODE_PATH"
              sudo xcode-select -s "$XCODE_PATH"
            else
              echo "No Xcode installation found!"
              exit 1
            fi
          fi
          
          # Verify selected Xcode version
          xcodebuild -version
      - name: Print environment information
        run: |
          echo "macOS version:"
          sw_vers
          echo "Xcode version:"
          xcodebuild -version
          echo "CocoaPods version:"
          pod --version
          echo "Ruby version:"
          ruby --version
      - name: Extract .env variable
        run: |
          echo "${{secrets.RELEASE_ENV}}" > .env.asc
          echo "${{secrets.RELEASE_GOOGLEPLIST}}" > GoogleService-Info.plist.asc
          gpg -d --passphrase "${{secrets.RELEASE_ENV_PASSWORD}}" --batch .env.asc > .env
          gpg -d --passphrase "${{secrets.RELEASE_GOOGLEPLIST_PASSWORD}}" --batch GoogleService-Info.plist.asc > ios/Runner/GoogleService-Info.plist
          echo "GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" >> ios/Flutter/Release.xcconfig
          echo "FACEBOOK_APP_ID=${{ secrets.FACEBOOK_APP_ID }}" >> ios/Flutter/Release.xcconfig
          echo "FACEBOOK_CLIENT_TOKEN=${{ secrets.FACEBOOK_CLIENT_TOKEN }}" >> ios/Flutter/Release.xcconfig
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"
      - name: Bundle install for iOS Gemfile
        timeout-minutes: 5
        run: cd ./ios && bundle install
      - name: Set up Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.5"
          channel: "stable"
          architecture: x64
          cache: true
      - name: Build and Deploy to TestFlight
        id: build_deploy
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          ASC_KEY_P8: ${{ secrets.ASC_KEY_P8 }}
        run: |
          cd ./ios
          bundle exec fastlane release_beta
      - name: Send a TF link to Slack
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{vars.CHANNEL_ID}}
          slack-message: " You can test <itms-beta://testflight.apple.com/v1/app/6504555731|Testflight> [*${{steps.build_deploy.outputs.VERSION_NUMBER}}* (${{steps.build_deploy.outputs.BUILD_NUMBER}})] "
        env:
          SLACK_BOT_TOKEN: ${{secrets.SLACK_BOT_TOKEN}}
