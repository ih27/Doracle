name: AAB Pipeline

on: #workflow_dispatch
  push:
    branches:
      - main

jobs:
  version:
    name: Version Number
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: "5.x"

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1.1.1

      - name: Creating version.txt with nuGetVersion
        run: echo ${{steps.gitversion.outputs.nuGetVersion}} > version.txt

      - name: Upload version.txt
        uses: actions/upload-artifact@v4
        with:
          name: gitversion
          path: version.txt

  build:
    name: Build APK and Creating Release
    needs: [version]
    runs-on: ubuntu-latest
    outputs:
      release_number: ${{steps.vars.outputs.release_number}}
      version_code: ${{steps.vars.outputs.version_code}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Extract secrets
        run: |
          echo "${{secrets.RELEASE_KEYSTORE}}" > upload-keystore.jks.asc
          echo "${{secrets.RELEASE_ENV}}" > .env.asc
          echo "${{secrets.RELEASE_PROP}}" > key.properties.asc
          echo "${{secrets.RELEASE_GOOGLEJSON}}" > google-services.json.asc
          gpg -d --passphrase "${{secrets.RELEASE_KEYSTORE_PASSWORD}}" --batch upload-keystore.jks.asc > android/app/upload-keystore.jks
          gpg -d --passphrase "${{secrets.RELEASE_ENV_PASSWORD}}" --batch .env.asc > .env
          gpg -d --passphrase "${{secrets.RELEASE_PROP_PASSWORD}}" --batch key.properties.asc > android/key.properties
          gpg -d --passphrase "${{secrets.RELEASE_GOOGLEJSON_PASSWORD}}" --batch google-services.json.asc > android/app/google-services.json
          echo "${{secrets.GCP_SA_KEY}}" > gcp_key.json
          export GOOGLE_APPLICATION_CREDENTIALS=gcp_key.json

      - name: Get version.txt
        uses: actions/download-artifact@v4
        with:
          name: gitversion

      - name: Create New File Without Newline Char from version.txt
        run: tr -d '\n' < version.txt > version1.txt

      - name: Read Version
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: version1.txt
      
      - name: Set release number and version code variable
        id: vars
        run: |
          echo "release_number=${{steps.version.outputs.content}}" >> "$GITHUB_OUTPUT"
          echo "version_code=$((${{github.run_number}} + 100))" >> "$GITHUB_OUTPUT"      

      - name: Update Version in YAML
        run: sed -i 's/99.99.99+99/${{steps.vars.outputs.release_number}}+${{steps.vars.outputs.version_code}}/g' pubspec.yaml

      - name: Update Keystore Password in Gradle Properties
        run: sed -i 's/#{STORE_PASSWORD}#/${{secrets.STORE_PASSWORD}}/g' android/key.properties
      
      - name: Update Keystore Key Password in Gradle Properties
        run: sed -i 's/#{KEY_PASSWORD}#/${{secrets.KEY_PASSWORD}}/g' android/key.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"
          cache: "gradle"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.2"
          channel: "stable"
          architecture: x64
          cache: true
      - run: flutter clean
      - run: flutter pub get

      - name: Build an APK
        run: flutter build apk --release --split-per-abi --obfuscate --split-debug-info=symbols

      - name: Send an APK to Slack
        uses: MeilCli/slack-upload-file@v4
        with:
          slack_token: ${{secrets.SLACK_BOT_TOKEN}}
          channel_id: ${{vars.CHANNEL_ID}}
          file_type: "apk"
          file_path: "build/app/outputs/apk/release/app-arm64-v8a-release.apk"
          title: "Fort-un-Tella"
          initial_comment: "Latest change => ${{github.event.head_commit.message}}"

      - name: Build an AAB
        run: flutter build appbundle --release --obfuscate --split-debug-info=symbols
      
      - name: Install Firebase CLI
        run: curl -sL https://firebase.tools | bash

      - name: Upload Crashlytics symbols
        run: firebase crashlytics:symbols:upload --app=${{vars.FIREBASE_ANDROID_APP_ID}} symbols

      - name: Create a Release in GitHub
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/apk/release/*.apk,build/app/outputs/bundle/release/app-release.aab"
          tag: ${{steps.vars.outputs.release_number}}
          commit: ${{github.sha}}

      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: appbundle
          path: build/app/outputs/bundle/release/app-release.aab

  release:
    name: Release app to internal track
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get appbundle from artifacts
        uses: actions/download-artifact@v4
        with:
          name: appbundle
      - name: Release app to production track
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{secrets.PLAYSTORE_ACCOUNT_KEY}}
          packageName: com.pp.fortuntella
          releaseFiles: app-release.aab
          track: internal
          status: completed
      - name: Send an AAB link to Slack
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{vars.CHANNEL_ID}}
          slack-message: "▶▶▶ You can test <https://play.google.com/apps/internaltest/4700816935968840426|Fort-un-Tella AAB> [*${{needs.build.outputs.release_number}}* (${{needs.build.outputs.version_code}})] ▶▶▶"
        env:
          SLACK_BOT_TOKEN: ${{secrets.SLACK_BOT_TOKEN}}
